main.StageParsing

![Parsing.]($ROOT/static/images/stage-parsing.png)

The first transformation in a compiler is often parsing. Working with raw text
is difficult, so we convert it to a ParseTree which is easier to work with.

## Parsing methods

* different parsing methods
* ParsecIntroduction

TODO: fill in stuff here

## Data structure for parse tree

We define the parse tree data structure like this ([`ParseTree.hs`](https://github.com/rickardlindberg/compiler-tutorial/blob/master/src/ParseTree.hs)):

    data Program = Program [Let]

    data Let     = Let String Term

    data Term    = Identifier String
                 | Number     Integer
                 | Lambda     [String] [Term]

This data structure should match the description of con in ConLanguage pretty
well.

Example program (assumes that `print` is a built-in function):

    let ANSWER = 42

    let main = \() ->
        printAnswer exit

    let printAnswer = \(k) ->
        print ANSWER k

Has the following parse tree:

![Parse tree.]($ROOT/static/images/con-parse-tree.png)

## The parse function

The top level parse function has the following type:

    parseCon :: String -> Either Error Program

And is implemented like this ([`Parser.hs`](https://github.com/rickardlindberg/compiler-tutorial/blob/master/src/Parser.hs)):

    parseCon input =
        case parse programParser "" input of
            Left  error   -> print error
            Right program -> program

## Continue

ExecutionModel
