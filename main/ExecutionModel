main.ExecutionModel

![Pre code generation.]($ROOT/static/images/stage-pre-code-gen.png)

At this point we have a parser (StageParsing) that transforms the con source
code to a parse tree. Before we can transform the parse tree to C code, we need
to understand the execution model of the source program. We need to figure out
how to run con programs in C. This is probably the most difficult part in
writing this compiler.

## Function + Environment = Closure

Let's take a look at the example from StageParsing again:

    let ANSWER = 42

    let main = \() ->
        printAnswer exit

    let printAnswer = \(k) ->
        print ANSWER k

This time we're going to look at how `printAnswer` is actually executed.

The first thing we must figure out in order to execute `printAnswer` is what
`print` is. Since it's not defined inside the function `printAnswer` or in its
arguments, we need to look for it somewhere else. In the general case, a
function has to look up names that do not exist in the argument list.

We call the place where functions look up names an **environment**. An
environment contains mappings from names to values. There is also a special
environment, the global environment, that has mappings for all top level
definitions and built-in names. In the example above, the global environment
looks like this:

![The global environment.]($ROOT/static/images/global-env.png)

A function without an environment is (in most cases) useless. Most of the time
a function needs to look up names in an environment. That is why all the
functions are stored together with an environment in the environment table. We
call a function + an environment a **closure**.

So when `printAnswer` looks up `print` in the global environment, it gets back
a closure where the built-in function `print` is bundled together with an
environment.

Looking up `ANSWER` works in a similar way, but this time the number 42 is
returned.

So what is `k`? It comes from the argument list. And when `printAnswer` is
called, we pass in `exit`. When the body of `main` is evaluated, `exit` is
looked up in the global environment, and we get back a closure.

At this point we have evaluated all elements in the body and we got

1. a closure
2. a number
3. a closure

The first element in the body must always be a closure since the body always
must result in a function call.

Next we put the number and the second closure in an argument list and pass that
argument list to the first closure.

## Nested closures

Let's look at an example to add three numbers given that we have a built-in
function `add` that adds two numbers:

    let add3 = \(one, two, three, k) ->
        add one two (\(sum) ->
            add sum three k
        )

This function takes four arguments: the three numbers to add and the
continuation to send the result to. The first thing we do is call the built-in
function `add` with the first two numbers. The result of that operation is sent
to a function. We create that function in place as an anonymous function. In
the body of that anonymous function we call `add` once again, but this time
with the sum of the first two numbers and the third number. We pass in `k` as
the continuation.

Now, `add3` is connected to the global environment since it is defined at the
top level. But what environment is the anonymous function connected to? It
can't be the global environment since `three` and `k` are not defined there.

What happens when an anonymous function is encountered is that a new
environment is created that contains all names in its surrounding. It also has
a link to the parent environment:

![Environment for anonymous function.]($ROOT/static/images/anon-env.png)

When the anonymous function is called, it looks up `add` in its environment.
Since it can't find it there, it looks in the parent environment, which is the
global environment, and finds it there. `sum` is obtained from the argument
list. `three` and `k` are both found the environment.

## Continue

RuntimeSupport or CodeGeneration
