main.CodeGeneration

![Code generation.]($ROOT/static/images/stage-code-gen.png)

Now it's time to generate C code from the parse tree. The generated code will
use the RuntimeSupport library.

Generating code in Haskell means generating a string that contains C code and
then writing it to a file. In CodeGenerationFramework we make a small framework
that allows us to generate that string in a more elegant way.

There are two things we need to generate: first the main function `con_main`,
and then one C function per con function.

The easiest way to get a feeling for how these two things should look like is
to compile a [test
program](https://github.com/rickardlindberg/compiler-tutorial/blob/master/scale.con)
using the reference implementation and then look at the generated code. If the
[compile](https://github.com/rickardlindberg/compiler-tutorial/blob/master/src/compile.sh)
script is used, the generated file is located in `sketch/con_program.cpp`.

The top-level code generator in the reference implementation looks like this:

    outProgram :: Program -> CodeGenerator ()
    outProgram (Program lets) = do
        addGlobalName "exit" "create_closure(&builtin_exit, env)"
        addGlobalName "setTempo" "create_closure(&builtin_setTempo, env)"
        addGlobalName "setBeat" "create_closure(&builtin_setBeat, env)"
        writeLine "#include \"runtime.h\""
        writeLine "#include <stdlib.h>"
        writeLine ""
        mapM_ outLet lets
        outMain

It generates C code for a whole con program. First we use `addGlobalName` for
the built in functions. They will be used later when the main function is
generated. `addGlobalName` is also part of the CodeGenerationFramework. Next we
output a few include lines. Following that is a loop to generate code for each
let expression. `outLet` generates C code for one let expression. Last we
generate the main function using `outMain`.

## Continue

AssembleHex
